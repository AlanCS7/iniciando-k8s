apiVersion: apps/v1
kind: Deployment
metadata:
  name: goserver # Nome do Deployment (identificador no cluster)
  labels:
    app: goserver # Label do Deployment (apenas decorativo)
spec:
  replicas: 1 # Número desejado de Pods
  selector:
    matchLabels:
      app: goserver # ❗ Deve ser igual aos labels dos Pods (abaixo). Isso define quais Pods o Deployment gerencia.
  template:
    metadata:
      labels:
        app: goserver # ❗ Deve bater com o matchLabels acima. Define os labels dos Pods que serão criados. Label dos Pods
    spec:
      containers:
        - name: goserver # Nome do container dentro do Pod (livre escolha)
          image: alancs7/hello-go:v5.4 # Imagem usada no container (pode usar tag específica ou latest)
          readinessProbe: # Define um teste de prontidão para o container
            httpGet:
              path: /healthz # Define a URL para o teste de prontidão
              port: 8080 # Define a porta para o teste de prontidão
            periodSeconds: 3 # Define o intervalo entre verificações
            failureThreshold: 1 # Define o número de falhas antes de considerar o container como não pronto
            initialDelaySeconds: 10 # Define o tempo de espera para a resposta do container

          livenessProbe: # Define um teste de saúde para o container
            httpGet:
              path: /healthz # Define a URL para o teste de saúde
              port: 8080 # Define a porta para o teste de saúde
            periodSeconds: 5 # Define o intervalo entre verificações
            # Threshold é um valor limite que, quando ultrapassado, dispara uma ação ou altera um comportamento
            failureThreshold: 1 # Define o número de falhas antes de considerar o container como não saudável e reiniciar
            timeoutSeconds: 1 # Define o tempo de espera para a resposta do container
            successThreshold: 1 # Define o número de sucessos antes de considerar o container como saudável
            initialDelaySeconds: 15 # Define o tempo de espera para a resposta do container

          envFrom:
            - configMapRef:
                name: goserver-env
            - secretRef:
                name: goserver-secret

          volumeMounts:
            - mountPath: "/go/myfamily"
              name: config

      volumes:
        - name: config
          configMap:
            name: configmap-family
            items:
              - key: members
                path: family.txt

          # env:
          #   - name: NAME
          #     value: "Alan"
          #   - name: AGE
          #     value: "25"

          # env:
          #   - name: NAME
          #     valueFrom:
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: NAME

          #   - name: AGE
          #     valueFrom:
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: AGE
