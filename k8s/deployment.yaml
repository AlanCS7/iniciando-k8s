apiVersion: apps/v1
kind: Deployment
metadata:
  name: goserver # Nome do Deployment (identificador no cluster)
  labels:
    app: goserver # Label do Deployment (apenas decorativo)
spec:
  replicas: 1 # Número desejado de Pods
  selector:
    matchLabels:
      app: goserver # ❗ Deve ser igual aos labels dos Pods (abaixo). Isso define quais Pods o Deployment gerencia.
  template:
    metadata:
      labels:
        app: goserver # ❗ Deve bater com o matchLabels acima. Define os labels dos Pods que serão criados. Label dos Pods
    spec:
      containers:
        - name: goserver # Nome do container dentro do Pod (livre escolha)
          image: alancs7/hello-go:v5.4 # Imagem usada no container (pode usar tag específica ou latest)

          startupProbe: # usada para garantir que a aplicação suba antes das outras probes entrarem em ação
            httpGet:
              path: /healthz
              port: 8080
            # Threshold é um valor limite que, quando ultrapassado, dispara uma ação ou altera um comportamento
            failureThreshold: 30 # tolera até 30 tentativas (a cada 3s) antes de considerar que a aplicação não subiu e reiniciar o container
            periodSeconds: 3 # checa a cada 3s se a app já "subiu"

          readinessProbe: # Define um teste de prontidão para o container
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10 # aguarda 10s antes da 1ª checagem para ver se a app está pronta
            periodSeconds: 3 # checa a cada 3s se a app está pronta
            failureThreshold: 3 # o pod é marcado como NotReady e deixa de receber tráfego se falhar 3 vezes seguidas

          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15 # aguarda 15s antes da 1ª checagem para ver se a app está viva
            periodSeconds: 5 # checa a cada 5s se a app está viva
            failureThreshold: 3 # Se falhar 3 vezes consecutivas (resposta inválida ou timeout), o container será reiniciado
            timeoutSeconds: 1 # Define o tempo de espera para a resposta do container

          envFrom:
            - configMapRef:
                name: goserver-env
            - secretRef:
                name: goserver-secret

          volumeMounts:
            - mountPath: "/go/myfamily"
              name: config

      volumes:
        - name: config
          configMap:
            name: configmap-family
            items:
              - key: members
                path: family.txt

          # env:
          #   - name: NAME
          #     value: "Alan"
          #   - name: AGE
          #     value: "25"

          # env:
          #   - name: NAME
          #     valueFrom:
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: NAME

          #   - name: AGE
          #     valueFrom:
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: AGE
